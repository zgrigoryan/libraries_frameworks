name: CMake on multiple platforms

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        build_type: [Release]
        include:
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: macos-latest
            c_compiler: clang
            cpp_compiler: clang++

    steps:
      - uses: actions/checkout@v4

      - name: Compute build dir
        id: cfg
        shell: bash
        run: |
          BUILD_DIR="${RUNNER_TEMP}/build-${{ matrix.os }}-${{ matrix.c_compiler }}-${{ matrix.build_type }}"
          echo "build_dir=$BUILD_DIR" >> "$GITHUB_OUTPUT"

      # ---------------- Dependencies ----------------

      - name: Install curl dev (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libcurl4-openssl-dev

      - name: Install curl dev (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew update
          brew install curl

      - name: Setup MSVC env (Windows)
        if: matrix.os == 'windows-latest'
        uses: ilammy/msvc-dev-cmd@v1

      - name: Setup vcpkg and install curl (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        env:
          VCPKG_INSTALLATION_ROOT: ${{ github.workspace }}\vcpkg
        run: |
          git clone https://github.com/microsoft/vcpkg $env:VCPKG_INSTALLATION_ROOT
          & $env:VCPKG_INSTALLATION_ROOT\bootstrap-vcpkg.bat
          & $env:VCPKG_INSTALLATION_ROOT\vcpkg.exe install curl:x64-windows

      # ---------------- Configure ----------------

      - name: Clean build dir
        run: cmake -E rm -rf "${{ steps.cfg.outputs.build_dir }}"

      - name: Configure (Linux/macOS)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          CMAKE_ARGS=(
            -B "${{ steps.cfg.outputs.build_dir }}"
            -S "${{ github.workspace }}"
            -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
            -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
            -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
          )
          # On macOS, point to Homebrew curl to avoid SDK curl if needed.
          if [ "${{ matrix.os }}" = "macos-latest" ]; then
            CMAKE_ARGS+=(-DCMAKE_PREFIX_PATH="$(brew --prefix curl)")
          fi
          cmake "${CMAKE_ARGS[@]}"

      - name: Configure (Windows with vcpkg)
        if: runner.os == 'Windows'
        shell: pwsh
        run: >
          cmake
          -B "${{ steps.cfg.outputs.build_dir }}"
          -S "${{ github.workspace }}"
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
          -DCMAKE_TOOLCHAIN_FILE="${{ github.workspace }}\vcpkg\scripts\buildsystems\vcpkg.cmake"

      # ---------------- Build ----------------

      - name: Build
        run: cmake --build "${{ steps.cfg.outputs.build_dir }}" --config ${{ matrix.build_type }}

      # ---------------- Run ----------------

      - name: Run (Linux/macOS)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          set -e
          BD="${{ steps.cfg.outputs.build_dir }}"
          [ -x "$BD/overload" ] && "$BD/overload"
          [ -x "$BD/http_demo" ] && "$BD/http_demo"

      - name: Run (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $bd = "${{ steps.cfg.outputs.build_dir }}\${{ matrix.build_type }}"
          if (Test-Path "$bd\overload.exe") { & "$bd\overload.exe" }
          if (Test-Path "$bd\http_demo.exe") { & "$bd\http_demo.exe" }
