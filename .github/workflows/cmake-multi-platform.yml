name: CMake on multiple platforms

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        build_type: [Release]
        include:
          # Ubuntu - GCC
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          # Ubuntu - Clang
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
          # Windows - MSVC
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          # macOS - Apple Clang (use clang/clang++)
          - os: macos-latest
            c_compiler: clang
            cpp_compiler: clang++

    steps:
      - uses: actions/checkout@v4

      - name: Set reusable strings
        id: strings
        shell: bash
        run: |
          echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

      # ----- Dependencies per OS -----

      - name: Install curl dev (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libcurl4-openssl-dev

      - name: Install curl dev (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew update
          brew install curl

      - name: Setup MSVC dev command prompt (Windows)
        if: matrix.os == 'windows-latest'
        uses: ilammy/msvc-dev-cmd@v1

      - name: Setup vcpkg and install curl (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        env:
          VCPKG_INSTALLATION_ROOT: ${{ github.workspace }}\vcpkg
        run: |
          git clone https://github.com/microsoft/vcpkg $env:VCPKG_INSTALLATION_ROOT
          & $env:VCPKG_INSTALLATION_ROOT\bootstrap-vcpkg.bat
          & $env:VCPKG_INSTALLATION_ROOT\vcpkg.exe install curl:x64-windows

      # ----- Configure CMake -----

      - name: Configure CMake (Unix)
        if: runner.os != 'Windows'
        shell: bash
        run: >
          cmake
          -B "${{ steps.strings.outputs.build-output-dir }}"
          -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
          -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
          ${{ (matrix.os == 'macos-latest') && format('-DCMAKE_PREFIX_PATH={0}', steps.brewpath.outputs.path) || '' }}
          -S "${{ github.workspace }}"
        env:
          # On macOS, prefer Homebrew curl if needed. (CMAKE_PREFIX_PATH is empty on Ubuntu.)
          # You can remove this if your CMake already finds system curl.
          # We compute brew path in the step below.
          BREW_CURL_PREFIX: ""

      - name: Grab Homebrew curl prefix (macOS)
        if: matrix.os == 'macos-latest'
        id: brewpath
        shell: bash
        run: echo "path=$(brew --prefix curl)" >> "$GITHUB_OUTPUT"

      - name: Re-configure CMake (macOS with brew prefix)
        if: matrix.os == 'macos-latest'
        shell: bash
        run: >
          cmake
          -B "${{ steps.strings.outputs.build-output-dir }}"
          -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
          -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
          -DCMAKE_PREFIX_PATH="${{ steps.brewpath.outputs.path }}"
          -S "${{ github.workspace }}"

      - name: Configure CMake (Windows + vcpkg)
        if: runner.os == 'Windows'
        shell: pwsh
        run: >
          cmake
          -B "${{ steps.strings.outputs.build-output-dir }}"
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
          -DCMAKE_TOOLCHAIN_FILE="${{ github.workspace }}\vcpkg\scripts\buildsystems\vcpkg.cmake"
          -S "${{ github.workspace }}"

      # ----- Build -----

      - name: Build
        run: cmake --build "${{ steps.strings.outputs.build-output-dir }}" --config ${{ matrix.build_type }}

      # ----- Run binaries -----

      - name: Run (Linux/macOS)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          set -eux
          if [ -x "${{ steps.strings.outputs.build-output-dir }}/overload" ]; then
            "${{ steps.strings.outputs.build-output-dir }}/overload"
          fi
          if [ -x "${{ steps.strings.outputs.build-output-dir }}/http_demo" ]; then
            "${{ steps.strings.outputs.build-output-dir }}/http_demo"
          fi

      - name: Run (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $dir = "${{ steps.strings.outputs.build-output-dir }}\${{ matrix.build_type }}"
          if (Test-Path "$dir\overload.exe") { & "$dir\overload.exe" }
          if (Test-Path "$dir\http_demo.exe") { & "$dir\http_demo.exe" }
